adt_binarytree(2) -- C functions for binary trees
=============================================

## SYNOPSIS

`#include "binaryTree.h"`<br>


<tree *> <br> 
`tree_create`(<int number, void * label, size_t size, tree * father, tree * left, tree * right>); <br>

<void> <br>
`tree_destroy`(<tree ** t>); <br>

<void> <br>
`tree_setLabel`(<tree * t, void * label, size_t size>); <br>

<void> <br>
`tree_updateFathers`(<tree * t>); <br>

<tree *> <br>
`tree_numberSearch`(<tree * t, int number>); <br>

<void> <br>
`tree_print`(<tree * t, void (*labelPrint)(void *)>); <br>

<int> <br>
`tree_depth`(<tree * t>); <br>

<int> <br>
`tree_height`(<tree * t>); <br>

<bool> <br>
`tree_exist`(<tree * t>); <br>

<bool> <br>
`tree_isLeaf`(<tree * t>); <br>

<bool> <br>
`tree_isFather`(<tree * t>); <br>



## DESCRIPTION

The **tree** functions allows creation, manipulation, and printing of tree in C. Labels inside the tree are <void *>, everything can be pointed behind the label. <br>
The structure of a **tree** is defined in <var>"binaryTree.h"</var> as: <br>
	
    typedef struct tree_s{
     int number;
	 void * label;
	 struct tree_s * left;
	 struct tree_s * right;
	 struct tree_s * father;
	} *tree*;

If a tree does not have a left-tree, a right-tree or a father (the root), it needs to be set to <NULL>.

The function `tree_create` create a tree. The *number* argument is only to search nodes with the function <tree_numberSearch>.
The *label* argument is a pointer to everything. The content of the label is duplicated inside the tree. The *size* represents the size of the content inside the label. 
*father*, *left*, and *right* represents respectively the father of the tree, the left tree and the right tree. Theses arguments can be set to *NULL*.

It is possible to create a tree, and to not specify the fathers in each node, and, after the creation to call `tree_updateFathers` to set all the fathers in all the tree.

The function `tree_depth` return the depth of the tree: it's the distance between the given tree and the root. <br>
The function `tree_height` return the height of the tree: it's the maximum distance between a tree and their childs.<br>
The function `tree_print` print a tree, and needs a function pointer for printing labels. There are already several functions like this in `adt_labels`(2).

## OPTIONS

<bool> `tree_printDebug`; -- If true, all datas of the tree structure will be displayed by `tree_print`
     

## AUTHOR

Valentin Pelloin (@valentinp72 - contact@valentinp72.fr)

## SEE ALSO

`adt_list`(2), `adt_queue`(2), `adt_stack`(2), `adt_labels`(2)
